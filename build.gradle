plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

version = "${project.mod_version}+${minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

java {
	toolchain {
		languageVersion.set JavaLanguageVersion.of(java_language_version)
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url 'https://jitpack.io' }
	maven {
		name 'Xander Maven'
		url 'https://maven.isxander.dev/releases'
	}
	maven {
		name = "CottonMC"
		url = "https://server.bbkr.space/artifactory/libs-release"
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"template" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modApi ("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi("com.terraformersmc:modmenu:${project.modmenu_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	modrinth {
		token = System.getenv("MODRINTH_TOKEN") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
		projectId = "template" // This can be the project ID or the slug. Either will work!
		versionType = "release" // This is the default -- can also be `beta` or `alpha`
		uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
		gameVersions = ["${project.minecraft_version}"] // Must be an array, even with only one version
		dependencies { // A special DSL for creating dependencies
			// scope.type
			// The scope can be `required`, `optional`, `incompatible`, or `embedded`
			// The type can either be `project` or `version`
			//incompatible.project "tectonic"
			required.project "fabric-api"
			required.project "cloth-config"
			optional.project "modmenu"
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}